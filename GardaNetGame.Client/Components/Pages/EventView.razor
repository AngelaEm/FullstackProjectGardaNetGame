@page "/event"
@rendermode InteractiveServer

@inject IEventService<EventsResponse> EventService
@inject NavigationManager NavigationManager
@* @inject BlobStorageService BlobStorageService *@

@using GardaNetGame.Shared.DTOs.Events.Response
@using GardaNetGame.Shared.Interfaces
@using GardaNetGame.Client.Services

<div id="EventView" class="pt-3">
    <h1 id="EventPageTitle" class="text-center pb-2">Kommande Event</h1>
</div>

<div class="container">
    <div class="row d-flex justify-content-center align-items-center ">
        @for (var i = 0; i < ActiveEvents.Count(); i++)
        {
            var aEvent = ActiveEvents[i];
            var idNumber = i + 1;
            @if (aEvent.IsUpcoming)
            {
                <div data-bs-theme="dark" class="col-md-5 col-sm-6 col-lg-3 px-3 pb-3">
                    <div id="card.@idNumber" @onclick="@(() => NavigateToEventDetails(aEvent.Id))" style="cursor: pointer;">
                        <div class="card text-center">
                            <div class="card-header">
                                <img src="@aEvent.EventImageUrl" @onclick="@(() => NavigateToEventDetails(aEvent.Id))" class="img-fluid" style="cursor: pointer; height: 250px;" alt="Bild saknas." />
                            </div>
                            <div id="cardbody.@idNumber" class="card-body">
                                <h5 id="cardtitle.@idNumber" class="card-title">@aEvent.Name</h5>
                                <p id="cardlocation.@idNumber" class="card-text">@aEvent.Location</p>
                                <p class="card-text">@aEvent.EventType.Type</p>
                                <a id="cardbutton.@idNumber" @onclick="@(() => NavigateToEventDetails(aEvent.Id))" class="btn btn-lg active card-shadow" style="border: 2px solid #FE0404; background-color: #383F46; color: #FBFBFA;">Mer information</a>
                            </div>
                            <div class="card-footer text-body-secondary">
                                <p id="carddate.@idNumber" class="card-text">@aEvent.Date</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>



<div id="PreviousEventTable" class="pt-3">
    <h4 class="text-center">Eventhistorik</h4>
</div>

<div class="px-3" data-bs-theme="dark">
    <div class="card text-center">
        <table class="table text-center">
            <thead>
                <tr>
                    <th scope="col4" class="text-center">Event</th>
                    <th scope="col4" class="text-center">Plats</th>
                    <th scope="col4" class="text-center">Datum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pEvent in EventList)
                {
                    @if (!pEvent.IsUpcoming)
                    {
                        <tr>
                            <th scope="row">
                                <a class="event-history-hover" @onclick="@(() => NavigateToEventDetails(pEvent.Id))">
                                    @pEvent.Name
                                </a>
                            </th>
                            <td>@pEvent.Location</td>
                            <td>@pEvent.Date</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {

    private List<EventsResponse> EventList = new();
    private List<EventsResponse> ActiveEvents = new();

    protected override async Task OnInitializedAsync()
    {
        EventList.AddRange(await EventService.GetAllEvents());

        foreach (var ev in EventList)
        {
            if (ev.IsUpcoming)
            {
                // if (ev != null && !string.IsNullOrEmpty(ev.EventImageUrl))
                // {
                //     var sasUrl = BlobStorageService.GenerateBlobSasUrl(ev.EventImageUrl);
                //     ev.EventImageUrl = sasUrl;
                // }
                ActiveEvents.Add(ev);
            }
        }

        ActiveEvents.OrderByDescending(response => response.Date);
    }

    private void NavigateToEventDetails(Guid eventId)
    {
        NavigationManager.NavigateTo($"/eventdetails/{eventId}");
    }


}
